generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{

  id String @id @default(cuid())
  userName String
  type LoginEnum
  email String @unique
  image String
  repo Repo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id,email])

}

model Repo{

  id String @id @default(cuid())
  repId String @unique
  repName String
  repOwnerId String
  repOwner User @relation(fields: [repOwnerId], references: [id])
  repoConfig repoConfig?
  repoLogs RepoLogs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, repId, repOwnerId])

}

model repoConfig {
  id               String           @id @default(cuid())
  repoId           String           @unique
  repo Repo @relation(fields: [repoId], references: [repId])
  docsFolder       String           @default("docs")
  enabled          Boolean
  detailLevel      DetailLevel
  includeExamples  Boolean
  includeTypeInfo  Boolean
  includedPaths    String[]
  excludedPaths    String[]
  fileTypes        String[]
  branches         String[]
  initialDocConfig InitialDocConfig?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([repoId,id])
}

model InitialDocConfig {
  id               String     @id @default(cuid())
  enabled          Boolean
  selectedFolders  String[]
  repoConfigId     String     @unique
  repoConfig       repoConfig @relation(fields: [repoConfigId], references: [id], onDelete: Cascade)
}

enum DetailLevel {
  minimal
  balanced
  comprehensive
}
model RepoLogs {

  id String @id @default(cuid())
  repId String 
  repo Repo @relation(fields: [repId], references: [repId])
  fileHash String
  treeHash String
  commitHash String?
  message String
  type Logs

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, repId, treeHash,commitHash])

}

enum LoginEnum {

  Github

}

enum Logs {

  DOC_ADDED
  DOC_UPDATED
  DOC_REMOVED


}